name: Taskvault CD (Compose on Runner)

on:
  # ⚠️ WICHTIG: CD startet NACH erfolgreichem Image-Publish
  workflow_run:
    workflows: ["Publish Docker image (GHCR)"]
    types: [completed]

permissions:
  contents: read
  packages: read

jobs:
  deploy-on-runner:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: java-project/taskvault

    env:
      CI_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Checkout (compose file & docs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute owner + tags (short SHA + run number)
        id: meta
        run: |
          echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          echo "SHORT_SHA=${CI_SHA:0:7}" >> $GITHUB_ENV
          # ACHTUNG: Das ist die Run-Number des Publish-Workflows (cd-image.yml)
          echo "RUN_TAG=${{ github.event.workflow_run.run_number }}" >> $GITHUB_ENV
          echo "Resolved tags: SHORT_SHA=${CI_SHA:0:7}, RUN_TAG=${{ github.event.workflow_run.run_number }}"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull API image (try short sha, fallback run number, with retries)
        run: |
          set +e
          for i in {1..10}; do
            echo "Try #$i: pull short-sha tag ghcr.io/${OWNER_LC}/taskvault-api:${SHORT_SHA}"
            docker pull ghcr.io/${OWNER_LC}/taskvault-api:${SHORT_SHA} && \
              echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV && exit 0
            echo "Short-sha not ready; try run-number tag ghcr.io/${OWNER_LC}/taskvault-api:${RUN_TAG}"
            docker pull ghcr.io/${OWNER_LC}/taskvault-api:${RUN_TAG} && \
              echo "IMAGE_TAG=${RUN_TAG}" >> $GITHUB_ENV && exit 0
            echo "Not found yet. Waiting 6s…"
            sleep 6
          done
          echo "Image tag not found after retries."
          exit 1

      - name: Chosen image tag
        run: echo "Using IMAGE_TAG=${IMAGE_TAG} (owner=${OWNER_LC})"

      - name: Compose Pull (with selected tag)
        run: docker compose -f docker-compose.ci.yml pull

      - name: Compose Up (detached)
        run: docker compose -f docker-compose.ci.yml up -d

      - name: Wait for API (HTTP 200)
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api || true)
            if [ "$code" = "200" ]; then
              echo "API is up (HTTP 200)"; exit 0
            fi
            echo "Waiting for API... ($i/30)"; sleep 5
          done
          echo "API not ready"
          docker compose -f docker-compose.ci.yml logs api postgres || true
          exit 1

      - name: Dump logs on failure
        if: failure()
        run: docker compose -f docker-compose.ci.yml logs --no-color || true

      - name: Compose Down (cleanup)
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v